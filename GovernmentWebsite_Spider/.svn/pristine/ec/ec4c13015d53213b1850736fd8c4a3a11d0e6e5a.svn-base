package com.meiah.webCrawlers.SitePlugin;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.transform.TransformerException;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.xpath.XPathAPI;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.gxhs.mongodb.entry.news.NewsGeneric;
import com.meiah.dao.TaskDao;
import com.meiah.htmlParser.ContentExtractor;
import com.meiah.htmlParser.PublishTimeExtractor;
import com.meiah.po.SiteConfig;
import com.meiah.po.Task;
import com.meiah.po.TaskLink;
import com.meiah.po.WebPage;
import com.meiah.trs.NewsTrsDo;
import com.meiah.util.Config;
import com.meiah.util.JavaUtil;
import com.meiah.util.MD5Utils;
import com.meiah.util.MyDate;
import com.meiah.util.SysConstants;
import com.meiah.util.SysObject;
import com.meiah.webCrawlers.PageResolver;
import com.meiah.webCrawlers.SiteCrawler;

public class PageResolver_General extends PageResolver {
	protected Logger logger = Logger.getLogger(PageResolver_General.class);
	
	public PageResolver_General(Task task) {
		super(task);
	}

	protected NewsGeneric resloveNewsPage(WebPage page) {
		String webContent = page.getWebContent();
		TaskLink link = page.getLink();
		Document doc = null;
		try {
			doc = JavaUtil.getDocument(webContent);
		} catch (Exception e) {
			logger.error("解析新闻页面出现异常！" + link.getUrl());
			return null;
		}
		webContent = clearHtml(webContent);
		NewsGeneric ne = new NewsGeneric();
		ne.setTask_id(task.getTaskid());
		ne.setPage_url(link.getUrl());
		ne.set_id(MD5Utils.getMD5(ne.getPage_url().getBytes()));
		String fileName = "";
		if (Config.getIsSaveSnapShot() == 1) {
			fileName = savePageSnapShot(page);
		}
		if(StringUtils.isNotBlank(fileName))
			ne.setPage_snapshot(fileName);
//		ne.setIslist(SysConstants.PAGETYPE_CONTENT);
//		ne.setSpot_code(Config.getSpotID());
		String webdomain = ne.getPage_url();
		String domain = webdomain.substring(webdomain.indexOf("://") + 3);
		domain = domain.substring(0, domain.indexOf("/"));
		ne.setWebsite_domain(SiteCrawler.topDomain);
		String prefixUrl = link.getRefererUrl().substring(0,link.getRefererUrl().indexOf("://") + 3);
		ne.setWebsite_url(prefixUrl + domain + "/");
		ne.setPage_size(String.valueOf(webContent.getBytes().length));
		Map<String, Task> ts = TaskDao.getInstance().getAllTaskMap();
		String siteName = ((Task) ts.get(ne.getTask_id())).getTname();
		ne.setWebsite_name(siteName);
		ne.setTask_name(siteName);
		String ipUrl = ((Task) ts.get(ne.getTask_id())).getUrl();
		String ipName = "";
		String ip = JavaUtil.matchWeak(ipUrl, "http://([^/]*)")[1];
		if (NewsTrsDo.ips == null)
			NewsTrsDo.ips = new HashMap<String, String>();
		if (NewsTrsDo.ips.containsKey(ip)) {
			ip = NewsTrsDo.ips.get(ip);
		} else {
			InetAddress a = null;
			try {
				a = InetAddress.getByName(ip);
			} catch (UnknownHostException e) {
				e.printStackTrace();
			}
			ip = a.getHostAddress();
			NewsTrsDo.ips.put(ip, a.getHostAddress());
		}
	    //ip地址所在地
		if(SysObject.ipTable.containsKey(ip)){
			ipName = SysObject.ipTable.get(ip);
		}else{
			ipName = NewsTrsDo.getAddressByIP(ip);
			if(StringUtils.isNotEmpty(ipName)){
				SysObject.ipTable.put(ip, ipName);
			}
		}
		ne.setWebsite_ip(ip);
		ne.setWebsite_ip_area(ipName);
		ne.setNews_class(task.getNewsType());
//		if (SiteCrawler.homePageUrls != null && SiteCrawler.homePageUrls.contains(ne.getUrl()))
//			ne.setIsHomePageNews(1);
		/** end default notChange * */
		String newsTitle = getNewsTitle(task.getSiteConfig(), page, doc);
		newsTitle = StringUtils.replaceEach(newsTitle, new String[] { "(?s)(?i)<.*?>","(?s)(?i)<.*?/>", "&ldquo;","&lsquo;","&rsquo;","&rdquo;","\r\n","\t","\n"," " }, new String[] { "","","","","","","","","",""});
		ne.setNews_title(newsTitle);
		if(StringUtils.isNotBlank(ne.getNews_title())) {
			String regex = "[\\u4E00-\\u9FA5]";
			String[] chinese = JavaUtil.match(ne.getNews_title(), regex);
			if (null == chinese || chinese.length < 0) {
				ne = null;
				return ne;
			}
		}
		long tStart = System.currentTimeMillis(), t2 = 0, t3 = 0, t4 = 0;
		String content = getNewsContent(task.getSiteConfig(), page, doc);

		if (logger.isDebugEnabled()) {
			t3 = System.currentTimeMillis() - tStart - t2;
			logger.debug("正文提取耗费时间：" + t3 + "ms");
		}
		String replace = "";
		if(content.contains("<?xml:namespace")) {
			replace = content.substring(content.indexOf("<?xml:namespace"));
			replace = replace.substring(0, replace.indexOf("/>") + 2);
		}
		content = StringUtils.replaceEach(content, new String[] { "(?s)(?i)<.*?>","(?s)(?i)<.*?/>", "&ldquo;","&lsquo;","&rsquo;","&rdquo;",replace }, new String[] { "" , "", "" ,"" , "","",""});
		ne.setNews_content(content.replaceAll("　", "").replaceAll("\r\n", "").replaceAll("\n", "").trim());
		
		Date dateDublished = getNewsPublishTime(task, page, doc);
		if(null != dateDublished)
			ne.setPage_publish_time(dateDublished);
		ne.setPage_save_time(new Date());
		InetAddress a = null;
		try {
			ne.setServer_ip(a.getLocalHost().getHostAddress());
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
		if (logger.isDebugEnabled()) {
			t4 = System.currentTimeMillis() - tStart - t2 - t3;
			logger.debug("时间提取耗费时间：" + t4 + "ms");
		}

		link.setLinkType(SysConstants.PAGETYPE_CONTENT);
		String newsSource = getNewsSource(task.getSiteConfig(), page, doc);
		if(StringUtils.isNotBlank(newsSource))
			ne.setPage_source(newsSource.replace(" ", "").replace("来源", "").replace("来源：", "").replace("来源:", ""));
		String newsAuthor = getNewsAuthor(task.getSiteConfig(), page, doc);
		if(StringUtils.isNotBlank(newsAuthor))
			ne.setNews_author(StringUtils.replaceEach(newsAuthor, new String[] { "等", "撰写","作者：","作者:"," ","?" ,"\r\n","作者"}, new String[] { "", "" ,"" , "","","","",""}));
		List<String> newsImage = getNewsImages(task.getSiteConfig(), page, doc,ne.getPage_url());
		if(!newsImage.isEmpty())
			ne.setPage_image_url(newsImage);
		//获取附件地址
		List<String> accessList = getNewsAccess(task.getSiteConfig(), page, doc, ne.getPage_url());
		if(!accessList.isEmpty()) 
			ne.setPage_acces(accessList);
		String columnName = getNewsColumnName(task.getSiteConfig(), page, doc);
		if(StringUtils.isNotBlank(columnName))
			ne.setNews_column(columnName);
		String documentNo = getNewsDocumentNo(task.getSiteConfig(), page, doc);
		if(StringUtils.isNotBlank(documentNo))
			ne.setNews_notice_code(documentNo);
		rtask.setContentPages(rtask.getContentPages() + 1);
		
		if(StringUtils.isEmpty(ne.getNews_title())) {
			ne = null;
			return ne;
		}
		if(StringUtils.isNotBlank(ne.getNews_title())) {
			boolean titleFilter = titleKeyFilter.isContentKeyWords(ne.getNews_title());
			if(titleFilter || StringUtils.isEmpty(ne.getNews_content()) || ne.getNews_title().length() < 5) {
				ne = null;
				return ne;
			}
		}
		if(StringUtils.isNotBlank(ne.getNews_content())) {
			if(ne.getNews_content().length() < 100) {
				ne = null;
			}
		}
		return ne;
	}
	/***
	 * 获取新闻中图片链接地址
	 * @param conf
	 * @param page
	 * @param doc
	 * @param pageUrl 
	 * @return
	 */
	protected List<String> getNewsImages(SiteConfig conf, WebPage page, Document doc, String pageUrl) {
		List<String> imgList = new ArrayList<String>();
		
		try {
			String text = getLocText(conf.getImageUrlLocation(), page, doc);
			if(StringUtils.isNotBlank(text)){
				NodeList itemNodes = XPathAPI.selectNodeList(JavaUtil.getDocument(text), "//IMG");
				for (int i = 0; i < itemNodes.getLength(); i++){
					Node node1 = itemNodes.item(i).getAttributes().getNamedItem("src");
					String imgUrl = "";
					if(null != node1){
						imgUrl += completeImageUrl(node1.getNodeValue(),imgUrl,pageUrl);
					}
					if(StringUtils.isNotBlank(imgUrl))
						imgList.add(imgUrl);
				}
			}
		} catch (Throwable e) {
			logger.error("抓取新闻图片链接出现异常: " + page.getLink().getUrl(), e);
		}
		return imgList;
	}
	
	/***
	 * 获取新闻中附件
	 * @param conf
	 * @param page
	 * @param doc
	 * @param pageUrl 
	 * @return
	 */
	protected List<String> getNewsAccess(SiteConfig conf, WebPage page, Document doc, String pageUrl) {
		List<String> accesList = new ArrayList<String>();
		
		try {
			String text = getLocText(conf.getImageUrlLocation(), page, doc);
			if(StringUtils.isNotBlank(text)){
				NodeList itemNodes = XPathAPI.selectNodeList(JavaUtil.getDocument(text), "//A");
				for (int i = 0; i < itemNodes.getLength(); i++){
					String accessUrl = "";
					Node node1 = itemNodes.item(i).getAttributes().getNamedItem("href");
					if(null != node1){
						accessUrl += completeImageUrl(node1.getNodeValue(),accessUrl,pageUrl);
					}
					if(StringUtils.isNotBlank(accessUrl))
						if (accessUrl.endsWith(".pdf") || accessUrl.endsWith(".docx") || accessUrl.endsWith(".doc") || accessUrl.endsWith(".xls") || accessUrl.endsWith(".xlsx"))
							accesList.add(accessUrl);
				}
			}
		} catch (Throwable e) {
			logger.error("抓取新闻附件链接出现异常: " + page.getLink().getUrl(), e);
		}
		return accesList;
	}
	/**
	 * 判断当前页面是否为正文页面
	 * 
	 * @param url
	 * @param pageType
	 * @param extractContent
	 * @return
	 */
	public boolean isContentPage(String url, String pageType,
			String extractContent) {
		boolean flag = false;
		if (pageType != null && pageType.length() != 0) {
			String contentRegex = "";
			contentRegex = pageType.indexOf("content:") != -1 ? pageType.substring("content:".length()).trim() : "";
			if (contentRegex.length() != 0 && JavaUtil.isAllMatch(url, contentRegex))
				flag = true;
		} else if (extractContent.length() > 200) {
			flag = true;
		} else {
			if (extractContent != null && !extractContent.equals("")) {
				String[] keyWords = new String[] { "电", "讯", "消息", "报道", "报导" };
				int indexInitial = extractContent.length() >= 20 ? 20
						: extractContent.length() - 1;
				String initText = extractContent.substring(0, indexInitial);
				for (int i = 0; i < keyWords.length; i++) {
					if (initText.indexOf(keyWords[i]) != -1) {
						flag = true;
						break;
					}

				}
			}
		}
		return flag;
	}

	protected String getLocText(String loc, WebPage page, Document doc) throws TransformerException {
		String itemText = "";
		String webContent = page.getWebContent();
		String itemLocation = loc;
		if (itemLocation != null && !itemLocation.trim().equals("")) {
			if (itemLocation.toLowerCase().startsWith("xpath:")) {
				itemLocation = itemLocation.replaceFirst("(?i)xpath:", "");
				Node itemNode = XPathAPI.selectSingleNode(doc, itemLocation);
				itemText = JavaUtil.getTagContent(itemNode);

			} else if (itemLocation.toLowerCase().startsWith("xpaths:")) {
				itemLocation = itemLocation.replaceFirst("(?i)xpaths:", "");
				NodeList itemNodes = XPathAPI.selectNodeList(doc, itemLocation);
				if (itemNodes != null) {
					StringBuilder sbd = new StringBuilder();
					for (int i = 0; i < itemNodes.getLength(); i++)
						sbd.append(JavaUtil.getTagContent(itemNodes.item(i)));
					itemText = sbd.toString();
				}

			} else if (itemLocation.toLowerCase().startsWith("beginend:")) {
				itemLocation = itemLocation.replaceFirst("(?i)beginend:", "");
				String[] temp = itemLocation.split(SiteConfig.SPLITER);
				if (temp != null && temp.length == 2) {
					String textBeginCode = temp[0];
					String textEndCode = temp[1];
					if (!textBeginCode.equals("") && !textEndCode.equals("")) {
						String text = webContent.toLowerCase();
						int iPos0 = text.indexOf(textBeginCode.toLowerCase());
						if (iPos0 != -1) {
							int len0 = textBeginCode.length();
							int iPos1 = text.indexOf(textEndCode.toLowerCase(), iPos0 + len0);
							if (iPos1 != -1) {
								itemText = text.substring(iPos0 + len0, iPos1);
							}
						}
					}
				}
			}
			if (itemText == null || itemText.equals("")) {
				logger.warn("插件配置的位置信息出现错误！请检查typeMapping.xml此处位置:" + loc + ",url:" + page.getLink().getUrl());
			}
		}
		return itemText;
	}

	/**
	 * 提取新闻标题
	 * 
	 * @param beginTitle
	 * @param endTitle
	 * @param webContent
	 * @return
	 */
	protected String getNewsTitle(SiteConfig conf, WebPage page, Document doc) {
		String title = "";
		try {
			String webContent = page.getWebContent();
			TaskLink link = page.getLink();

			title = getLocText(conf.getTitleLocation(), page, doc);

			if (title == null || title.equals("")) {
				String linkText = link.getTitle();
				if (linkText != null && linkText.trim().length() != 0) {
					title = linkText;
				} else {
					String[] temp = JavaUtil.match(webContent, "(?s)(?i)<title>(.*?)</title>");
					if (temp != null && temp.length > 0)
						title = temp[1];
				}
			}

			if (title != null) {
				title = title.replaceAll("(?is)<style.*?</style>", "").replaceAll("(?is)<(no)?script.*?((/>)|(</(no)?script>))", "")
						.replaceAll("(?is)<select.*?</select>", "").replaceAll("(?is)<!--.*?-->", "");
				title = title.replaceAll("&gt;?", ">").replaceAll("&lt;?", "<");
				title = title.replaceAll("&nbsp;", " ").replaceAll("(?s)(?i)<.*?>", "");
				title = title.trim();
				title = title.replaceAll("\r\n", "")
						.replaceAll("\n", "").replaceAll("\t", "")
						.replaceAll(">>", "").replaceAll("　　", "")
						.replaceAll(" ", "").replaceAll("■  ", "")
						.replaceAll("&gt;", "").replaceAll("&lt;", "")
						.replaceAll(" ", "").replaceAll("\t","")
						.replaceAll("&ldquo;", "").replaceAll("&rdquo;", "");
			}

		} catch (Exception e) {
			logger.error("提取标题出现异常！", e);
		}

		return title;
	}

	/**
	 * 提取新闻标题
	 * 
	 * @param beginTitle
	 * @param endTitle
	 * @param webContent
	 * @return
	 */
	protected String getNewsContent(SiteConfig conf, WebPage page, Document doc) {
		String content = "";
		try {
			String webContent = page.getWebContent();
			TaskLink link = page.getLink();
			content = getLocText(conf.getContentLocation(), page, doc);
			// logger.info(content);
			if (content != null) {
				content = content.replaceAll("(?is)<marquee.*?</marquee>", "");
				content = content.replaceAll("&gt;?", ">").replaceAll("&lt;?", "<");
//				content = content.replaceAll("(?is)<style.*?</style>", "").replaceAll("(?is)<(no)?script.*?((/>)|(</(no)?script>))","")
				content = content.replaceAll("(?is)<style.*?</style>", "").replaceAll("(?is)<(no)?script.*?((</(no)?script>))","")
						.replaceAll("(?is)<select.*?</select>", "").replaceAll("(?is)<!--.*?-->", "");

				content = content.replaceAll("(?is)</?p( .*?)?>", "　　");
				content = content.replaceAll("(?is)</?br/?>", "　　");
				content = content.replaceAll("(?is)<.*?>", "");
				content = content.replaceAll("&ldquo;", "").replaceAll("&lsquo;", "").replaceAll("&rsquo;", "").replaceAll("&rdquo;", "");
				content = content.replaceAll("&nbsp;?", " ").replaceAll("&#149;?", "").replaceAll("&quot;?", "\"").replaceAll("[\\s]+", " ");
			}

			if (content == null || content.equals("") || content.matches("[\\s　]+")) {
				webContent = clearHtml(webContent);
				try {
					content = ContentExtractor.extractMainContent("", "", webContent);
				} catch (Exception e) {
					logger.error("抓取正文出现异常，链接地址: " + link.getUrl(), e);
				}
			}
		} catch (Exception e) {
			logger.error("提取正文出现异常！", e);
		}

		return content;
	}


	protected Date getNewsPublishTime(Task task, WebPage page, Document doc1) {
		Date publishTime = null;
		String content = "";
		try {
			// String webContent = page.getWebContent();
			// TaskLink link = page.getLink();
			Date linktime = page.getLink().getPublishTime();
			if (linktime != null)
				return linktime;
			content = getLocText(task.getSiteConfig().getPublishTimeLocation(), page, doc1);
			// logger.info(content);
			if (content != null && !content.replaceAll("\\s+", "").equals("")) {
				content = " " + content + " ";
				PublishTimeExtractor te = new PublishTimeExtractor();

				publishTime = te.getNewsPublishedDate(page.getLink().getUrl(), content, task.getDateFormat(), task.getDatePos());
			}

			if (content == null || content.equals("")) {
				PublishTimeExtractor te = new PublishTimeExtractor();
				String webContent = clearHtml(page.getWebContent());
				publishTime = te.getNewsPublishedDate(page.getLink().getUrl(), webContent, task.getDateFormat(), task.getDatePos());
			}
		} catch (Exception e) {
			logger.error("提取新闻发布日期出现异常！", e);
		}

		// Date publishTime = null;

		return publishTime;
	}

	/**
	 * 提取新闻来源
	 * 
	 * @param beginSource
	 * @param endSource
	 * @param webContent
	 * @return
	 */
	protected String getNewsSource(SiteConfig conf, WebPage page, Document doc) {
		String newsSource = "";
		String webContent = page.getWebContent();
		TaskLink link = page.getLink();
		try {
			String souce = page.getLink().getSource();
			if (souce != null && !souce.trim().equals(""))
				return souce;
			newsSource = getLocText(conf.getSourceSiteLocation(), page, doc);
			newsSource = newsSource.replaceAll("&nbsp;", " ").replaceAll(
					"(?s)(?i)<.*?>", "");
			if (newsSource == null || newsSource.equals("")) {
				String regex = "(?s)(?i)(来源\\s+|來源：|来源：|來源:|来源:|来自:)([\\u4E00-\\u9FA5]+[0-9]+|[\\u4E00-\\u9FA5]+-[\\u4E00-\\u9FA5]+|[\\u4E00-\\u9FA5]+)";
				webContent = webContent
						.replaceAll("(?i)(?s)<marquee.*?</marquee>", "")
						.replaceAll("(?s)(?i)<.*?>", " ")
						.replaceAll("\\s+", " ");
				String[] results = JavaUtil.match(webContent, regex);
				if ((results != null) && (results.length > 2)) {
					newsSource = results[2];
				}
			}
			if (newsSource != null)
				newsSource = newsSource.replaceAll("&nbsp;", " ").replaceAll(
						"(?s)(?i)<.*?>", "");
		} catch (Throwable e) {
			logger.error("抓取新闻来源出现异常: " + link.getUrl(), e);
		}
		if(newsSource.equals("作者") || newsSource.equals(" 作者") || newsSource.contains("人气") || newsSource.contains("日期")
				|| newsSource.contains("点击") || newsSource.contains("时间") || newsSource.length() <= 1 || newsSource.contains("其它")
				|| newsSource.contains("浏览") || newsSource.contains("分享") || newsSource.contains("其他"))
			newsSource = "";
		return newsSource;
	}

	/**
	 * 提取新闻作者
	 * 
	 * @param beginAuthor
	 * @param endAuthor
	 * @param webContent
	 * @return
	 */
	protected String getNewsAuthor(SiteConfig conf, WebPage page, Document doc) {
		String newsAuthor = "";
		String webContent = page.getWebContent();
		TaskLink link = page.getLink();
		try {
			String author = page.getLink().getAuthor();
			if (author != null && !author.trim().equals(""))
				return author;
			newsAuthor = getLocText(conf.getAuthorLocation(), page, doc);

			if (newsAuthor == null || newsAuthor.equals("")) {
				webContent = webContent
						.replaceAll("(?i)(?s)<marquee.*?</marquee>", "")
						.replaceAll("(?s)(?i)<.*?>", "")
						.replaceAll("\\s+", " ").replaceAll("&nbsp;", "");
				if (newsAuthor.equals("")) {
					String regex = "(?s)(?i)(作者：|作者:|作者\\s+|作者︰|作者 :|編輯\\s+|編輯：|編輯:|编辑：|编辑:|编辑\\s+|\\（记者：|\\（记者:|\\(记者：|\\(记者:|发布者：|发布者\\s+|发布者:|\\d+\\s+\\|\\s+)([\\u4E00-\\u9FA5]{1}\\s+[\\u4E00-\\u9FA5]{1}|\\s*[\\u4E00-\\u9FA5]+\\s*|\\s*\\[[\\u4E00-\\u9FA5]+\\])";
					String[] results = JavaUtil.match(webContent, regex);
					if ((results != null) && (results.length > 2))
						newsAuthor = results[2];
					if(newsAuthor.equals("")) {
						regex = "(?s)(?i)([\\u4E00-\\u9FA5]{1}\\s+[\\u4E00-\\u9FA5]{1}|[\\u4E00-\\u9FA5]{2,4})(\\d{4}年\\s+)";
						results = JavaUtil.match(webContent, regex);
						if ((results != null) && (results.length > 1))
							newsAuthor = results[1];
					}
					if(newsAuthor.equals("")) {
						regex = "(?s)(?i)(作者：|作者:|作者\\s+|作者︰|作者 :|編輯\\s+|編輯：|編輯:|编辑：|编辑:|编辑\\s+|\\（记者：|\\（记者:|\\(记者：|\\(记者:|发布者：|发布者\\s+|发布者:|\\d+\\s+\\|\\s+)([\\u4E00-\\u9FA5]+\\s+[\\u4E00-\\u9FA5]+{2,4})";
						results = JavaUtil.match(webContent, regex);
						if ((results != null) && (results.length > 2))
							newsAuthor = results[2];
					}
				}
				String single = "";
				String multi = "";
				if(!StringUtils.isEmpty(newsAuthor)) {
					single = newsAuthor.substring(0,1);
					if(newsAuthor.length() >= 2) {
						multi = newsAuthor.substring(0,2);
					}
					boolean isSingle = this.baijiaS.isContentKeyWords(single);
					boolean isMulti = this.baijiaM.isContentKeyWords(multi);
					boolean boo = this.keyFilter.isContentKeyWords(newsAuthor);
					if(newsAuthor.length() > 4) {
						newsAuthor = "";
					} else {
						if(!isSingle && !isMulti) {
							newsAuthor = "";
						} else {
							if(boo) {
								newsAuthor = "";
							}
						}
					}
					if (newsAuthor.contains("报道")) {
						newsAuthor = newsAuthor.replaceAll("报道", "");
					}
					if(newsAuthor.length() <= 1) {
						newsAuthor = "";
					}
				}
			}
			if (newsAuthor != null)
				newsAuthor = newsAuthor.replaceAll("&nbsp;", " ").replaceAll(
						"(?s)(?i)<.*?>", "");
		} catch (Throwable e) {
			logger.error("抓取新闻作者出现异常: " + link.getUrl(), e);
		}
		return newsAuthor;
	}

	/***
	 * 获取新闻中图片链接地址
	 * @param conf
	 * @param page
	 * @param doc
	 * @return
	 */
//	protected String getNewsImages(SiteConfig conf, WebPage page, Document doc) {
//		String imgUrl = "";
//		try {
//			String text = getLocText(conf.getImageUrlLocation(), page, doc);
//			if(StringUtils.isNotBlank(text)){
//				NodeList itemNodes = XPathAPI.selectNodeList(JavaUtil.getDocument(text), "//IMG | //A");
//				for (int i = 0; i < itemNodes.getLength(); i++){
//					Node node1 = itemNodes.item(i).getAttributes().getNamedItem("src");
//					if(null != node1){
//						if(i==itemNodes.getLength()-1){
//							imgUrl += completeImageUrl(node1.getNodeValue(),imgUrl);
//						}else{
//							imgUrl += completeImageUrl(node1.getNodeValue(),imgUrl)+",";
//						}
//					}
//					Node node2 = itemNodes.item(i).getAttributes().getNamedItem("href");
//					if(null != node2){
//						if(i==itemNodes.getLength()-1){
//							imgUrl += completeImageUrl(node2.getNodeValue(),imgUrl);
//						}else{
//							imgUrl += completeImageUrl(node2.getNodeValue(),imgUrl)+",";
//						}
//					}
//				}
//			}
//		} catch (Throwable e) {
//			logger.error("抓取新闻图片链接出现异常: " + page.getLink().getUrl(), e);
//		}
//		return imgUrl;
//	}
	
	/**
	 * 获取新闻栏目名称
	 * @param count
	 * @return
	 */
	protected String getNewsColumnName(SiteConfig conf, WebPage page, Document doc) {
		String columnName = "";
		String webContent = page.getWebContent();
		TaskLink link = page.getLink();
		try {
			String columnMC = page.getLink().getColumnName();
			if (columnMC != null && !columnMC.trim().equals(""))
				return columnMC;
			columnName = getLocText(conf.getColumnNameLocation(), page, doc);

			if (StringUtils.isEmpty(columnName)) {
				
				String regex = "(?s)(?i)(首页|位置：|位置:)(\\s*»\\s*|\\s*>>\\s*|\\s*>\\s*|\\s*->\\s*|\\s*-\\s*|\\s*\\|\\s*|\\s*/\\s*|\\s*—\\s*|\\s*→\\s*"
						+ "|\\s*[\\u4E00-\\u9FA5]+\\s*>>\\s*|\\s*[\\u4E00-\\u9FA5]+\\s*>\\s*|\\s*[\\u4E00-\\u9FA5]+\\s*-\\s*|\\s*[\\u4E00-\\u9FA5]+\\s*\\"
						+ "|\\s*\\s*)([\\u4E00-\\u9FA5]+[a-zA-Z]+|[\\u4E00-\\u9FA5]+)";
				webContent = webContent
						.replaceAll("(?is)<marquee.*?</marquee>", "")
						.replaceAll("(?s)(?i)<.*?>", "")
						.replaceAll("\\s+", " ").replaceAll("&nbsp;", "")
						.replaceAll("&gt;", ">").replaceAll("&#62;", ">")
						.replaceAll("&mdash;", "—")
						.replaceAll("&raquo;", ">").replaceAll("&gt", ">")
						.replaceAll("-&gt;&gt;", ">")
						.replaceAll("设为首页", "");
				String[] temp = JavaUtil.match(webContent, regex);
				if ((temp != null) && (temp.length >= 3))
					columnName = temp[3].replace("首页 >", "");
				
				if ((!StringUtils.isEmpty(columnName))
						&& ((columnName.contains("首页")) || (columnName
								.contains("更多")))) {
					regex = "(?s)(?i)(位置:\\s*|位置：\\s*)([\\u4E00-\\u9FA5]+)(\\s*>\\s*|\\s*>>)";
					webContent = webContent
							.replaceAll("(?is)<marquee.*?</marquee>", "")
							.replaceAll("(?s)(?i)<.*?>", "")
							.replaceAll("\\s+", " ").replaceAll("&nbsp;", "");
					temp = JavaUtil.match(webContent, regex);
					if ((temp != null) && (temp.length >= 2))
						columnName = temp[2];
				}
				if (StringUtils.isEmpty(columnName) || columnName.contains("我们是")) {
					regex = "(?s)(?i)(当前位置：\\s*|当前位置:\\s*|您的位置:\\s*|您的位置：\\s*|位置：首页/)([\\u4E00-\\u9FA5]+[a-zA-Z]+|[\\u4E00-\\u9FA5]+)";
					webContent = webContent
							.replaceAll("(?is)<marquee.*?</marquee>", "")
							.replaceAll("(?s)(?i)<.*?>", "")
							.replaceAll("\\s+", " ").replaceAll("&nbsp;", "");
					temp = JavaUtil.match(webContent, regex);
					if ((temp != null) && (temp.length >= 2))
						columnName = temp[2];
				}
				if(columnName.contains("网站地图") && webContent.contains(">")) {
					regex = "(?s)(?i)([\\u4E00-\\u9FA5]+\\s*>\\s+)([\\u4E00-\\u9FA5]+)";
					webContent = webContent
							.replaceAll("(?is)<marquee.*?</marquee>", "")
							.replaceAll("(?s)(?i)<.*?>", "")
							.replaceAll("\\s+", " ").replaceAll("&nbsp;", "");
					temp = JavaUtil.match(webContent, regex);
					if ((temp != null) && (temp.length >= 2))
						columnName = temp[2];
				}
				if(!StringUtils.isEmpty(columnName)) {
					boolean boo = keyFilter.isContentKeyWords(columnName);
					if(boo) {
						columnName = "";
					}
				}
			} 
			if(StringUtils.isNotBlank(columnName))
				columnName = columnName.replaceAll("&nbsp;", " ").replaceAll("(?s)(?i)<.*?>", "");
		} catch (Throwable e) {
			logger.error("抓取栏目名称出现异常: " + link.getUrl(), e);
			e.printStackTrace();
		}
		return columnName;
	}
	/**
	 * 获取新闻文号
	 * @param count
	 * @return
	 */
	protected String getNewsDocumentNo(SiteConfig conf, WebPage page, Document doc) {
		String documentNo = "";
		String webContent = page.getWebContent();
		TaskLink link = page.getLink();
		try {
			String documentNumber = page.getLink().getDocumentName();
			if (documentNumber != null && !documentNumber.trim().equals(""))
				return documentNumber;
			documentNo = getLocText(conf.getDocumentLocation(), page, doc);
			
			if (documentNo == null || documentNo.equals("")) {
				String regex = "(?s)(?i)发文字号：\\s*[\\u4E00-\\u9FA5]+\\[\\d+\\].*?号|\\d{4}年\\d{1,2}月\\d{1,2}日[\\u4E00-\\u9FA5]+第\\d+号|\\d{4}年第\\d+号|\\d{4}年[\\u4E00-\\u9FA5]+第\\d+号|\\s+[\\u4E00-\\u9FA5]+〔[0-9]+〕[0-9]+号|\\s+[\\u4E00-\\u9FA5]+第[0-9]+号|[\\u4E00-\\u9FA5]+\\[\\d+\\]号";
				webContent = webContent
						.replaceAll("(?is)<marquee.*?</marquee>", "")
						.replaceAll("(?s)(?i)<.*?>", "")
						.replaceAll("\\s+", " ").replaceAll("&nbsp;", "");
				String[] temp = JavaUtil.match(webContent, regex);
				if ((temp != null) && (temp.length > 0)) {
					documentNo = temp[0];
				}
			}
			if (documentNo != null)
				documentNo = documentNo.replaceAll("&nbsp;", " ").replaceAll(
						"(?s)(?i)<.*?>", "").replaceAll("发文字号：", "").replaceAll("	", "");
		} catch (Throwable e) {
			logger.error("抓取文号出现异常: " + link.getUrl(), e);
		}
		return documentNo;
	}
	
	protected static synchronized ArrayList<WebPage> getSavePages(int count) {
		ArrayList<WebPage> pages = null;
		if (SysObject.getPageSize() > 0) {
			if (count > 0) {
				pages = new ArrayList<WebPage>();
				for (int i = 0; i < count; i++) {
					WebPage page = SysObject.getPage();
					if (page != null) {
						pages.add(page);
					}
				}
			} else {
				pages = new ArrayList<WebPage>();
				while (SysObject.getPageSize() > 0) {
					WebPage page = SysObject.getPage();
					if (page != null) {
						pages.add(page);
					}
				}
			}
		}
		return pages;
	}

	/**
	 * 保存html页面的快照文件，编码（UTF8）h
	 * 
	 * @param webContent
	 * @return
	 */
	protected String savePageSnapShot(WebPage page) {
		String webContent = page.getWebContent();
		TaskLink link = page.getLink();
		String savePath = (SiteCrawler.fileSavePath);
		if (savePath.endsWith("\\") || savePath.endsWith("/"))
			savePath = savePath.substring(0, savePath.length()) + "/";
		else
			savePath = savePath + "/";
		savePath = savePath + task.getTaskid() + "/";
		MyDate now = new MyDate();
		String yyyymmdd = now.get_yyyymmdd();
		String hhmmsss = now.get_hh24miss();
		String foldPath = yyyymmdd.substring(0, 4) + "/"
				+ yyyymmdd.substring(4, 6) + "/" + yyyymmdd.substring(6, 8)
				+ "/" + hhmmsss.substring(0, 2) + "/" + hhmmsss.substring(2, 3);

		File savaFolder = new File(savePath + foldPath);
//		System.out.println("地址:..."+savaFolder);
		if (!savaFolder.exists())
			savaFolder.mkdirs();
		String fileName = "WEB.4101000101013001." + yyyymmdd + "." + hhmmsss
				+ "." + (10000 + Math.round(Math.random() * 10000)) + ".htm";
		File htmlFile = new File(savaFolder.getAbsolutePath() + "/" + fileName);
		OutputStreamWriter out = null;
		try {

			if (!htmlFile.exists())
				htmlFile.createNewFile();
			out = new OutputStreamWriter(new FileOutputStream(htmlFile),
					"utf-8");
			out.write(webContent);
			out.flush();
			out.close();

		} catch (FileNotFoundException e) {

			logger.error("保存文件出现错误:" + link.getUrl(), e);
		} catch (IOException e) {

			logger.error("保存文件出现错误:" + link.getUrl(), e);
		} finally {
			if (out != null)
				try {
					out.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}

		return fileName;
	}

	/**
	 * 去除html页面源代码 无用信息
	 * 
	 * @param webSourcePage
	 * @return
	 */
	protected String clearHtml(String webSourcePage) {
		String target = webSourcePage.replaceAll("(?is)<style.*?</style>", "")
				.replaceAll("(?is)<(no)?script.*?</(no)?script>", "")
				.replaceAll("(?is)<select.*?</select>", "").replaceAll(
						"(?is)<!--.*?-->", "");
		target = target.replaceAll("&nbsp;?", " ").replaceAll("[ ]{2,}", " ")
				.replaceAll("\\s+", " ");
		return target;
	}
 
	public static void main(String[] args) {}
}
